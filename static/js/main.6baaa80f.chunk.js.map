{"version":3,"sources":["components/Questions/RadioGroup.js","components/Questions/ProgressBar.js","components/Questions/DropDown.js","components/Questions/Question.js","components/Questions/QuestionList.js","components/StartSurvey.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["RadioGroup","question","radioValue","hasAnswered","onSelectRadioValue","choices","map","choice","react_default","a","createElement","className","key","id","concat","type","onClick","name","value","ProgressBar","props","style","width","progressInPercent","DropDown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listOpen","onSelectDropDownItem","bind","assertThisInitialized","toggleList","setState","prevState","_this2","dropDownValue","clear","item","Component","Question","buttonEnabled","inputValue","onUpdateInputValue","onClickBack","onClickNext","prevProps","ifExistSetOldAnswer","_this$setState","answer","defineProperty","e","preventDefault","filter","goToNext","Number","target","back","evt","length","_this$state","_this$props","quizLength","current","text","maxLength","onChange","Questions_DropDown","BackButton","NextButton","QuestionList","questions","mockQuestions","ifExistSetOldAnswersFromLocalStorage","setCurrentQuestionFromPath","pathname","location","lastIndex","split","pathQuestionId","isNaN","result","JSON","parse","localStorage","getItem","updateQuestions","update","$set","setItem","stringify","history","push","match","path","Switch","Route","exact","render","Questions_Question","assign","selected","StartSurvey","Link","textDecoration","color","to","Result","retakeTest","answerValue","index","getAnswerValue","StartRoute","_ref2","component","getPathIfExist","Redirect","next","App","BrowserRouter","basename","process","_ref","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6baaa80f.chunk.js","sourcesContent":["import React from 'react';\nimport './css/radio-group.scss';\n\nconst RadioGroup = (question, radioValue, hasAnswered, onSelectRadioValue) => {\n    return question.choices.map((choice) => {\n        return (\n            <ul>\n                <li className=\"\" key={choice.id}>\n                    <div className=\"selected\">{radioValue === choice.id ?\n                        <i className=\"icon-style check fas fa-check\"></i> : null}</div>\n                    <button\n                        className={`button-question ${hasAnswered === choice.id ? \"selected\" : null}`}\n                        type=\"submit\"\n                        onClick={onSelectRadioValue} name={question.id}\n                        value={choice.id}>\n                        {choice.value}</button>\n                </li>\n            </ul>)\n    })\n}\n\nexport default RadioGroup;\n","import React from 'react';\nimport './css/progress-bar.scss';\n\nconst ProgressBar = (props) => {\n    return (<div className=\"progress-wrapper\">\n        <div className=\"progress-background-bar\">\n            <div className=\"progress-bar\" style={{\"width\": props.progressInPercent}}></div>\n        </div>\n    </div>)\n}\n\nexport default ProgressBar;","import React, {Component} from 'react';\nimport './css/dropdown.scss';\n\nclass DropDown extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listOpen: false\n        }\n        this.onSelectDropDownItem = this.onSelectDropDownItem.bind(this);\n        this.toggleList = this.toggleList.bind(this);\n\n    }\n\n    toggleList() {\n        this.setState(prevState => ({\n            listOpen: !prevState.listOpen\n        }))\n    }\n\n    onSelectDropDownItem(id) {\n        this.props.onSelectDropDownItem(id);\n    }\n\n    render() {\n\n        const {listOpen} = this.state;\n\n        return (\n            <div className=\"dropdown-wrapper\" onClick={this.toggleList}>\n                <div className=\"dropdown-toggle\">\n                    <div\n                        className=\"dropdown-selected\">{!(this.props.dropDownValue == null) ? this.props.choices[this.props.dropDownValue].value : 'Choose from list'}</div>\n                    <i className={`icon-style dropdown-arrow fas fa-chevron-${listOpen ? 'up':'down'}`}></i>\n                    <br style={{clear: \"both\"}}/>\n                </div>\n                {listOpen && <ul className=\"dropdown-menu\">\n                    {this.props.choices.map((item)=> (\n                        <li className=\"dropdown-menu-item\" key={item.id}\n                            onClick={() => this.onSelectDropDownItem(item.id)}>{item.value}</li>\n                    ))}\n                </ul>}\n            </div>\n        )\n    }\n}\n\nexport default DropDown;\n","import React, {Component} from 'react';\nimport './css/questions.scss';\nimport './css/input.scss';\nimport RadioGroup from './RadioGroup.js'\nimport ProgressBar from './ProgressBar.js'\nimport DropDown from './DropDown'\n\nconst Input = (value, onUpdateInputValue) => {\n    return (<div><label className=\"input-label\">Your Answer:</label>\n        <textarea className=\"input\" type=\"text\" maxLength=\"250\" value={value} onChange={onUpdateInputValue}/>\n    </div>)\n}\n\nconst BackButton = (current, onClickBack) => {\n    return (current >= 1 ? <button className=\"back-button\" onClick={onClickBack}>BACK</button> : null)\n}\n\nconst NextButton = (hasAnswered, onClickNext) => {\n    return (hasAnswered ? <button className=\"back-button next\" onClick={onClickNext}>NEXT</button> : null)\n}\n\nclass Question extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttonEnabled: false,\n            hasAnswered: false,\n            id: 0,\n            inputValue: null\n        }\n        this.onSelectRadioValue = this.onSelectRadioValue.bind(this);\n        this.onUpdateInputValue = this.onUpdateInputValue.bind(this);\n        this.onSelectDropDownItem = this.onSelectDropDownItem.bind(this);\n        this.onClickBack = this.onClickBack.bind(this);\n        this.onClickNext = this.onClickNext.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.ifExistSetOldAnswer(prevState);\n    }\n\n    ifExistSetOldAnswer(prevState) {\n        let type = this.props.question.type;\n        if (prevState[type + 'Value'] == null && this.props.question.answer != null) {\n            this.setState({\n                [type + 'Value']: this.props.question.answer,\n                hasAnswered: true\n            })\n        }\n    }\n\n    onClickNext(e) {\n        e.preventDefault();\n        let state = this.state;\n        let values = [state.inputValue, state.radioValue, state.dropDownValue];\n        let value = values.filter((item) => item != null)[0];\n        this.props.goToNext(value);\n        this.setState({\n            hasAnswered: false,\n            radioValue: null,\n            inputValue: null,\n            dropDownValue: null\n        })\n    }\n\n    onSelectRadioValue(e) {\n        e.preventDefault();\n        this.setState({\n            hasAnswered: true,\n            radioValue: Number(e.target.value)\n        })\n    }\n\n    onClickBack(e) {\n        this.props.back();\n        this.setState({\n            radioValue: null,\n            inputValue: null,\n            dropDownValue: null\n        });\n    }\n\n    onUpdateInputValue(evt) {\n        if (evt.target.value.length > 0) {\n            this.setState({\n                inputValue: evt.target.value,\n                hasAnswered: true\n            });\n        }\n        else {\n            this.setState({\n                hasAnswered: false,\n                inputValue: evt.target.value,\n\n            });\n        }\n    }\n\n    onSelectDropDownItem(id) {\n        this.setState({\n            dropDownValue: Number(id),\n            hasAnswered: true\n        })\n    }\n\n    render() {\n\n        const {hasAnswered, radioValue, inputValue, dropDownValue} = this.state;\n        const {question, quizLength, current} = this.props;\n        const type = question.type;\n        const progressInPercent = ((current + 1) / quizLength) * 100 + '%';\n\n        return (\n            <div className=\"card\">\n                <h5 className=\"question-number\">Question {current + 1} of {quizLength}</h5>\n\n                {ProgressBar(progressInPercent)}\n\n                <h1 className=\"question-text\">{question.text}</h1>\n\n                {type === 'radio' ? RadioGroup(question, radioValue, hasAnswered, this.onSelectRadioValue) : null}\n                {type === 'input' ? Input(inputValue, this.onUpdateInputValue) : null}\n                {type === 'dropDown' ? <DropDown dropDownValue={dropDownValue}\n                                                 choices={this.props.question.choices}\n                                                 onSelectDropDownItem={this.onSelectDropDownItem}/> : null}\n                <div>\n                    {BackButton(current, this.onClickBack)}\n                    {NextButton(hasAnswered, this.onClickNext)}\n                    <br style={{clear:\"both\"}}/>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Question;","import React, {Component} from 'react';\nimport Question from './Question.js'\nimport '../../common-styles/common-style.scss';\nimport update from 'immutability-helper';\nimport mockQuestions from '../../mockQuestions.json';\nimport {Route,Switch} from 'react-router-dom'\n\nclass QuestionList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: mockQuestions,\n            current: 0,\n            quizLength: mockQuestions.length\n        }\n        this.back = this.back.bind(this);\n        this.goToNext = this.goToNext.bind(this);\n    }\n\n    componentDidMount() {\n        this.ifExistSetOldAnswersFromLocalStorage();\n        this.setCurrentQuestionFromPath();\n    }\n\n    setCurrentQuestionFromPath() {\n        let pathname = this.props.location.pathname;\n        let lastIndex = pathname.split('/').length - 1\n        let pathQuestionId = pathname.split('/')[lastIndex];\n        pathQuestionId = !isNaN(pathQuestionId) ? Number(pathQuestionId) : 0;\n        if (pathQuestionId !== this.state.current) {\n            this.setState({\n                current: pathQuestionId\n            })\n        }\n    }\n\n    ifExistSetOldAnswersFromLocalStorage() {\n        const result = JSON.parse(localStorage.getItem(\"result\"));\n        if (result) {\n            this.setState({\n                questions: result\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.setCurrentQuestionFromPath();\n    }\n\n    goToNext(answer) {\n        const current = this.state.current;\n        if (current < this.state.questions.length - 1) {\n            this.setState((state, props) => {\n                const updateQuestions = update(state.questions, {[state.current]: {answer: {$set: answer}}});\n                localStorage.setItem(\"result\", JSON.stringify(updateQuestions));\n                return {\n                    current: state.current + 1,\n                    questions: updateQuestions\n                }\n            }, this.props.history.push(`${this.props.match.path}/${this.state.current + 1}`));\n        }\n        else {\n            const updateQuestions = update(this.state.questions, {[this.state.current]: {answer: {$set: answer}}});\n            localStorage.setItem(\"result\", JSON.stringify(updateQuestions));\n            this.props.history.push('/result');\n        }\n    }\n\n    back() {\n        const current = this.state.current\n        if (current > 0) {\n            this.setState({\n                current: current - 1\n            }, this.props.history.push(`${this.props.match.path}/${this.state.current - 1}`));\n        }\n    }\n\n    render() {\n\n        const question = this.state.questions[this.state.current];\n        const match = this.props.match;\n\n        return (\n            <div className=\"background-cover\">\n                <div className=\"background-cover\">\n                    <div className=\"container\">\n                        <div className=\"questions\">\n                            <Switch>\n                                <Route exact path={`${match.path}/:current`}\n                                       render={() => <Question selected={null} question={question} back={this.back} goToNext={this.goToNext} {...this.state} />}/>\n                                <Route\n                                    exact\n                                    path={match.path}\n                                    render={() => <Question question={question} back={this.back} goToNext={this.goToNext} {...this.state} />}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default QuestionList;","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport '../common-styles/common-style.scss';\n\nconst StartSurvey = () => {\n\n    return (\n        <div className=\"background-cover\">\n            <div className=\"container\">\n                <div className=\"card\">\n                    <h1 className=\"title\">\n                        Welcome to the survey!\n                    </h1>\n                    <Link style={{ textDecoration: 'none', color: \"white\" }} to=\"/questions\">\n                        <button className=\"green-button\">\n                            Start Survey\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        </div>)\n}\n\nexport default StartSurvey;\n\n","import React, {Component} from 'react';\nimport './result.scss';\n\nclass Result extends Component {\n\n    constructor(props) {\n        super(props);\n        const result = JSON.parse(localStorage.getItem(\"result\"));\n        this.state = {\n            result: result\n        };\n        this.retakeTest = this.retakeTest.bind(this);\n    }\n\n    retakeTest() {\n        this.props.history.push(`/`);\n        localStorage.clear();\n    }\n\n    getAnswerValue(question) {\n        let answerValue;\n        if (!question.choices) return question.answer\n        answerValue = question.choices.filter((choice) => {\n            return question.answer === choice.id\n        })\n        answerValue = answerValue[0] ? answerValue[0].value : question.answer;\n        return answerValue\n    }\n\n    render() {\n\n        const {result} = this.state;\n\n        return (\n            <div className=\"background-cover\">\n                <div className=\"container\">\n                    <div className=\"card\">\n                        <h1 className=\"title\">\n                            Thanks for your participation\n                        </h1>\n                        <button onClick={this.retakeTest} className=\"green-button\">\n                            Retake It\n                        </button>\n                        <div className=\"questions-and-anwers\">\n                            <h1 className=\"summary\">Your Summary:</h1>\n                            <ul>\n                                {result.map((question, index) => {\n                                    return (\n                                        <li>\n                                            <div className=\"summary-question\">Q{index + 1}: {question.text}</div>\n                                            <div>\n                                                <div\n                                                    className=\"summary-answer\">\n                                                    Your answer: {this.getAnswerValue(question)}</div>\n                                            </div>\n                                        </li>)\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport QuestionList from './components/Questions/QuestionList.js'\nimport StartSurvey from './components/StartSurvey.js'\nimport Result from './components/Result.js'\nimport { BrowserRouter,Route,Switch,Redirect } from 'react-router-dom'\n\nclass App extends Component {\n\n    render() {\n        return (\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Route render={({ location }) => (\n                    <div>\n                    <Switch>\n                        <StartRoute exact path=\"/\" component={StartSurvey}/>\n                        <Route path=\"/questions\" component={QuestionList}/>\n                        <Route exact path=\"/result\" component={Result}/>\n                    </Switch>\n                    </div>\n                    )}\n                />\n            </BrowserRouter>\n        )\n    }\n\n}\n\nfunction StartRoute({component: Component}) {\n    return (\n        <Route\n            render={() => getPathIfExist() ? <Redirect to={getPathIfExist()} />: <Component /> }\n        />\n    );\n}\n\nfunction getPathIfExist() {\n    if (localStorage.getItem(\"result\") !== null) {\n        const result = JSON.parse(localStorage.getItem(\"result\"));\n        var next = result.filter(item => item.answer != null);\n        if (next.length === result.length) {\n            return {pathname: \"/result\"}\n        }\n        return {pathname: `/questions/${next.length}`}\n    }\n    else {\n        return false\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}